# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_code_generation.ipynb.

# %% auto 0
__all__ = ['render_jinja2', 'SalTemplateLoader', 'SalCodeGenerator', 'SalJinjaFrontmatter']

# %% ../nbs/02_code_generation.ipynb 4
from .loaders import xml_to_data
from .core import Data, iter_data
from jinja2 import Environment, BaseLoader, Template
from typing import Optional, Any
import abc
from jinja2 import StrictUndefined

# %% ../nbs/02_code_generation.ipynb 11
def render_jinja2(template: str, filters: Optional[dict]=None, **kwargs: Any) -> str:
    if not filters:
        filters = {}
    
    env = Environment(loader=BaseLoader(), undefined=StrictUndefined)
    env.filters.update(filters)
    
    jinja_tpl: Template = env.from_string(template)
    return jinja_tpl.render(**kwargs)

# %% ../nbs/02_code_generation.ipynb 16
class SalTemplateLoader(abc.ABC):
    @abc.abstractclassmethod
    def get_template(self, name: str):
        pass
    
class SalCodeGenerator(abc.ABC):
    def __init__(self, template_loader: SalTemplateLoader):
        self.template_loader = template_loader

    def get_template(self, name: str):
        return self.template_loader.get_template(name)
    
    @abc.abstractclassmethod
    def render(self, data: Data):
        pass

# %% ../nbs/02_code_generation.ipynb 34
class SalJinjaFrontmatter(SalJinja):
    
    def __init__(self, template_loader: SalTemplateLoader):
        super().__init__(template_loader)
        self.frontmatter_handler = YAMLFrontMatter()
    
    def get_template(self, name: str, frontmatter=False):
        template = super().get_template(name)
        if not frontmatter:
            return self.frontmatter_handler.get_content(template)
        else:
            return self.frontmatter_handler.get_raw_frontmatter(template)
        
    def get_frontmatter_attributes_for_data(self, template: str, data: Data) -> dict:
        fm_rendered = render_jinja2(template, node=data, **data.attrs)  
        fm_parsed = self.frontmatter_handler.parse(fm_rendered)
        return fm_parsed
    
    def process_data(self, data: Data):
        for d, _ in iter_data(data):
            # load template
            template = self.get_template(d.name, frontmatter=True)
            # handle front matter
            new_attributes = self.get_frontmatter_attributes_for_data(template, d)
            # update attributes
            d.attrs.update(new_attributes)
        return data

