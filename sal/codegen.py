# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_code_generation.ipynb.

# %% auto 0
__all__ = ['render', 'JinjaRenderer', 'TemplateRepository', 'TemplateRenderer', 'SalBasic', 'FrontMatter',
           'FrontMatterSalTemplateLoader', 'Sal', 'TemplateRendered2']

# %% ../nbs/02_code_generation.ipynb 2
from .loaders import xml_to_data
from .core import Data, iter_data
from jinja2 import Environment, BaseLoader, Template
from typing import Optional, Any
import abc
from jinja2 import StrictUndefined
from textwrap import dedent
from frontmatter.util import u
from yaml.parser import ParserError
from frontmatter.default_handlers import YAMLHandler

# %% ../nbs/02_code_generation.ipynb 10
def _get_env():
    return Environment(
        loader=BaseLoader(), 
        undefined=StrictUndefined
    )

# %% ../nbs/02_code_generation.ipynb 12
def render(
    template: str, # template in string form
    filters: Optional[dict]=None, # jinja filters
    **kwargs: Any,
) -> str:
    if not filters:
        filters = {}
    
    env = _get_env()
    env.filters.update(filters)
    
    jinja: Template = env.from_string(template)
    result: str = jinja.render(**kwargs)
        
    return result

# %% ../nbs/02_code_generation.ipynb 16
class JinjaRenderer:
    
    # if no template is passed in, we use the DEFAULT_TEMPLATE
    DEFAULT_TEMPLATE = "{% for child in children %}{{ child | render }}{% endfor %}"
    
    @abc.abstractmethod
    def load_template_by_name(self, name: str) -> str:
        """Load a template based on a name"""
        raise NotImplementedError
        
    def get_template(self, data: Data, frontmatter=False) -> str:
        """Separate method to allow to override it to modify the template"""
        return self.load_template_by_name(data.name)

    def render_with_template(self, data: Data, template: str=DEFAULT_TEMPLATE) -> str:
        filters = dict(render=self.process)
        children = data.children
        
        return render(
            template, 
            node=data, 
            filters=filters,
            children=children, 
            **data.attrs
        ) 
    
    def render(self, data: Data) -> str:
        template = self.get_template(data)
        return self.render_with_template(data, template)
    
    def process(self, data: Data) -> str:
        return self.render(data)   

# %% ../nbs/02_code_generation.ipynb 19
class TemplateRepository:
    """Simple collector of templates"""
    def __init__(self, *args, templates=None, **kwargs):
        super().__init__(*args, **kwargs)
        self.templates = templates
    
    def load_template_by_name(self, name: str):
        if name in self.templates.keys():
            return self.templates[name]
        raise ValueError(name)
    
class TemplateRenderer(TemplateRepository, JinjaRenderer):    
    pass

# %% ../nbs/02_code_generation.ipynb 22
class SalBasic:    
    def __init__(self, renderer: Optional[JinjaRenderer]=None):
        self.renderer = renderer or JinjaRenderer()

    def pre_process_data(self, data: Data):
        return data
    
    def action_default(self, data: Data):
        return self.renderer.process(data)
    
    def action_to_file(self, data: Data):
        rendered = self.renderer.render_with_template(data)
        to = data.attrs['to']
        with open(to, 'w') as h:
            h.write(rendered)
        return rendered
    
    def process_data(self, data: Data):
        if data.name == 'to-file':
            return self.action_to_file(data)
        elif data.name == 'wrapper':
            return [self.process(d) for d in data.children]
        else:
            return self.action_default(data)

    def process(self, data: Data):
        data = self.pre_process_data(data)
        return self.process_data(data)


# %% ../nbs/02_code_generation.ipynb 37
class FrontMatter:
    def __init__(self, handler=None):
        if handler is None:
            handler = YAMLHandler()
        self.handler = handler

    def split(self, raw_content, *, encoding="utf-8"):
        raw_content = u(raw_content, encoding).strip()

        try:
            fm, content = self.handler.split(raw_content)
        except ValueError:
            return None, raw_content, self.handler

        return fm, content

    def parse(self, raw_frontmatter, *, metadata=None):
        if metadata is None:
            metadata = {}

        try:
            raw_frontmatter = self.handler.load(raw_frontmatter)
        except ParserError as e:
            msg = dedent(f"""
            ===
            There is an error with the following yaml (front matter)
            
            ```
            {raw_frontmatter}
            ```

            ===

            """)

            print(msg)
            raise e

        if isinstance(raw_frontmatter, dict):
            metadata.update(raw_frontmatter)

        return metadata

    
    def get_content(self, template):
        frontmatter, content = self.split(template)
        return content.strip()
    
    def get_raw_frontmatter(self, template):
        resp = self.split(template)
        frontmatter, content = resp
        return frontmatter.strip()


# %% ../nbs/02_code_generation.ipynb 42
class FrontMatterSalTemplateLoader(JinjaRenderer):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.frontmatter_handler = FrontMatter()
        
    def get_frontmatter_attributes_for_data(self, template: str, data: Data) -> dict:
        fm_rendered = self.render_with_template(data, template)  
        fm_parsed = self.frontmatter_handler.parse(fm_rendered)
        return fm_parsed
    
    def get_template(self, data: Data, frontmatter=False):
        template = super().get_template(data)
        if not frontmatter:
            template = self.frontmatter_handler.get_content(template)
        else:
            template = self.frontmatter_handler.get_raw_frontmatter(template)
        return template


# %% ../nbs/02_code_generation.ipynb 44
class Sal(SalBasic):
    def __init__(self, renderer: Optional[FrontMatterSalTemplateLoader]=None):
        self.renderer = renderer or FrontMatterSalTemplateLoader()
        
    def pre_process_data(self, data: Data):
        for d, _ in iter_data(data):
            # load template
            template = self.renderer.get_template(data, frontmatter=True)
            # handle front matter
            new_attributes = self.renderer.get_frontmatter_attributes_for_data(template, d)
            # update attributes
            d.attrs.update(new_attributes)
        return data


# %% ../nbs/02_code_generation.ipynb 45
class TemplateRendered2(TemplateRepository, FrontMatterSalTemplateLoader):
    pass
