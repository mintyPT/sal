# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_cli.ipynb.

# %% auto 0
__all__ = ['main', 'render', 'is_notebook']

# %% ../nbs/03_cli.ipynb 4
import click
from pathlib import Path
from .core import Data
from .loaders import xml_file_to_data
from sal.codegen import (
    Sal,
    FrontMatterInMemoryTemplateLoader,
    Renderer,
    JinjaTemplateRenderer,
    MissingTemplate,
)

# %% ../nbs/03_cli.ipynb 7
def _render(file, templates):
    try:
        repository = FrontMatterInMemoryTemplateLoader.from_directory(templates)
        renderer = Renderer(repository=repository, renderer=JinjaTemplateRenderer())
        sal = Sal(renderer)

        struct: Data = xml_file_to_data(file)
        return sal.process(struct)
    except MissingTemplate as e:
        path = Path(templates) / f"{e.name}.jinja2"
        path.write_text(Renderer.DEFAULT_TEMPLATE)
        return render(file, templates)

# %% ../nbs/03_cli.ipynb 12
@click.group()
def main():
    pass

# %% ../nbs/03_cli.ipynb 13
# TODO : init command
# - create : sal.xml file
# - create : sal folder
# - create : sal/templates folder


@main.command()
@click.option("--filename", type=click.Path(exists=True), default="./sal.xml")
@click.option("--folder", type=click.Path(exists=True), default="./sal")
def render(filename, folder):
    click.echo(f"⚠️ {filename=}")
    click.echo(f"⚠️ {folder=}")
    _render(filename, str(Path(folder) / "templates"))


# %% ../nbs/03_cli.ipynb 14
def is_notebook() -> bool:
    try:
        shell = get_ipython().__class__.__name__
        if shell == "ZMQInteractiveShell" or shell == "CaptureShell":
            return True  # Jupyter notebook or qtconsole
        elif shell == "TerminalInteractiveShell":
            return False  # Terminal running IPython
        else:
            return False  # Other type (?)
    except NameError:
        return False  # Probably standard Python interpreter

# %% ../nbs/03_cli.ipynb 15
if __name__ == "__main__" and not is_notebook():
    main()
