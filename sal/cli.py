# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_cli.ipynb.

# %% auto 0
__all__ = ['render', 'hello', 'is_notebook']

# %% ../nbs/03_cli.ipynb 4
import click
from pathlib import Path
from .core import Data
from .loaders import xml_file_to_data
from sal.codegen import (
    Sal,
    FrontMatterInMemoryTemplateLoader,
    Renderer,
    JinjaTemplateRenderer,
    MissingTemplate,
)

# %% ../nbs/03_cli.ipynb 7
def render(file, templates):
    try:
        repository = FrontMatterInMemoryTemplateLoader.from_directory(templates)
        renderer = Renderer(repository=repository, renderer=JinjaTemplateRenderer())
        sal = Sal(renderer)

        struct: Data = xml_file_to_data(file)
        return sal.process(struct)
    except MissingTemplate as e:
        path = Path(templates) / f"{e.name}.jinja2"
        path.write_text(Renderer.DEFAULT_TEMPLATE)
        return render(file, templates)

# %% ../nbs/03_cli.ipynb 12
@click.command()
@click.option("--count", default=1, help="Number of greetings.")
@click.option("--name", prompt="Your name")
def hello(count, name):
    """Simple program that greets NAME for a total of COUNT times."""
    for x in range(count):
        click.echo(f"Hello {name}!")

# %% ../nbs/03_cli.ipynb 13
def is_notebook() -> bool:
    try:
        shell = get_ipython().__class__.__name__
        if shell == "ZMQInteractiveShell" or shell == "CaptureShell":
            return True  # Jupyter notebook or qtconsole
        elif shell == "TerminalInteractiveShell":
            return False  # Terminal running IPython
        else:
            return False  # Other type (?)
    except NameError:
        return False  # Probably standard Python interpreter

# %% ../nbs/03_cli.ipynb 14
print('='*120)
print('='*120)
print('='*120)
print('='*120)
if __name__ == "__main__" and not is_notebook():
    hello()
